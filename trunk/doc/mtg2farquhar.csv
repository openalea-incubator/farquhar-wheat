organ,green_area,width,height,PAR,na_init
lamina,sum(blade.LeafElement[i].green_area),?,"blade.LeafElement.geometry.pointList.getCenter()[2] 
OU MS.insertion (si présent dans MTG)",blade.LeafElement[*].exposed_area (à renseigner par Caribu),blade.na_init
sheath,sheath.StemElement.green_length * sheath.diameter * pi,sheath.diameter,min(blade.LeafElement[*].geometry.pointList[blade.LeafElement[*].geometry.pointList.getZMinIndex()][2]),sheath.StemElement.exposed_area (à renseigner par Caribu),sheath.na_init
internode,internode.StemElement.green_length * internode.diameter * pi,internode.diameter,"internode.StemElement.geometry.pointList.getCenter()[2] 
OU MS.insertion (si présent dans MTG)",internode.StemElement.exposed_area (à renseigner par Caribu),internode.na_init
chaff,internode[n_phyt-1].StemElement.green_length * internode[n_phyt-1].diameter * pi,internode[n_phyt-1].diameter,"internode[n_phyt-1].StemElement.geometry.pointList.getCenter()[2] 
OU MS.insertion (si présent dans MTG)",internode[n_phyt-1].StemElement.exposed_area (à renseigner par Caribu),internode[n_phyt-1].na_init
peduncle,internode[n_phyt-2].StemElement.green_length * internode[n_phyt-2].StemElement.diameter * pi,internode[n_phyt-2].diameter,"internode[n_phyt-2].StemElement.geometry.pointList.getCenter()[2] 
OU MS.insertion (si présent dans MTG)",internode[n_phyt-2].StemElement.exposed_area (à renseigner par Caribu),internode[n_phyt-2].na_init
